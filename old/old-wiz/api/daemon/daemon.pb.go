// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/tim15/wiz/api/proto/daemon.proto

/*
Package daemon is a generated protocol buffer package.

It is generated from these files:
	github.com/tim15/wiz/api/proto/daemon.proto

It has these top-level messages:
	Version
	PackageList
	Config
	Status
	Empty
*/
package daemon

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import pkg "github.com/tim15/wiz/api/pkg"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Represents the backend used to run jobs
type Config_RunBackend int32

const (
	Config_LOCAL  Config_RunBackend = 0
	Config_DOCKER Config_RunBackend = 1
)

var Config_RunBackend_name = map[int32]string{
	0: "LOCAL",
	1: "DOCKER",
}
var Config_RunBackend_value = map[string]int32{
	"LOCAL":  0,
	"DOCKER": 1,
}

func (x Config_RunBackend) String() string {
	return proto.EnumName(Config_RunBackend_name, int32(x))
}
func (Config_RunBackend) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type Version struct {
	Version string `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
}

func (m *Version) Reset()                    { *m = Version{} }
func (m *Version) String() string            { return proto.CompactTextString(m) }
func (*Version) ProtoMessage()               {}
func (*Version) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Version) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type PackageList struct {
	Packages []*pkg.Package `protobuf:"bytes,1,rep,name=packages" json:"packages,omitempty"`
}

func (m *PackageList) Reset()                    { *m = PackageList{} }
func (m *PackageList) String() string            { return proto.CompactTextString(m) }
func (*PackageList) ProtoMessage()               {}
func (*PackageList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PackageList) GetPackages() []*pkg.Package {
	if m != nil {
		return m.Packages
	}
	return nil
}

type Config struct {
	// Represents the directory used to store packages
	PackageLocation string            `protobuf:"bytes,1,opt,name=package_location,json=packageLocation" json:"package_location,omitempty"`
	RunBackend      Config_RunBackend `protobuf:"varint,2,opt,name=run_backend,json=runBackend,enum=daemon.Config_RunBackend" json:"run_backend,omitempty"`
	// Determines which compute devices to use. Can be `all` or a list of devices. Defaults to all.
	UseComputeDevices string `protobuf:"bytes,3,opt,name=use_compute_devices,json=useComputeDevices" json:"use_compute_devices,omitempty"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (m *Config) String() string            { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Config) GetPackageLocation() string {
	if m != nil {
		return m.PackageLocation
	}
	return ""
}

func (m *Config) GetRunBackend() Config_RunBackend {
	if m != nil {
		return m.RunBackend
	}
	return Config_LOCAL
}

func (m *Config) GetUseComputeDevices() string {
	if m != nil {
		return m.UseComputeDevices
	}
	return ""
}

type Status struct {
	Status bool `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Status) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func init() {
	proto.RegisterType((*Version)(nil), "daemon.Version")
	proto.RegisterType((*PackageList)(nil), "daemon.PackageList")
	proto.RegisterType((*Config)(nil), "daemon.Config")
	proto.RegisterType((*Status)(nil), "daemon.Status")
	proto.RegisterType((*Empty)(nil), "daemon.Empty")
	proto.RegisterEnum("daemon.Config_RunBackend", Config_RunBackend_name, Config_RunBackend_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Daemon service

type DaemonClient interface {
	GetVersion(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Version, error)
	InstallPackages(ctx context.Context, in *PackageList, opts ...grpc.CallOption) (*Status, error)
	GetPackages(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PackageList, error)
	GetConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Config, error)
	SetConfig(ctx context.Context, in *Config, opts ...grpc.CallOption) (*Status, error)
}

type daemonClient struct {
	cc *grpc.ClientConn
}

func NewDaemonClient(cc *grpc.ClientConn) DaemonClient {
	return &daemonClient{cc}
}

func (c *daemonClient) GetVersion(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Version, error) {
	out := new(Version)
	err := grpc.Invoke(ctx, "/daemon.Daemon/GetVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) InstallPackages(ctx context.Context, in *PackageList, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := grpc.Invoke(ctx, "/daemon.Daemon/InstallPackages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) GetPackages(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PackageList, error) {
	out := new(PackageList)
	err := grpc.Invoke(ctx, "/daemon.Daemon/GetPackages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) GetConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Config, error) {
	out := new(Config)
	err := grpc.Invoke(ctx, "/daemon.Daemon/GetConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) SetConfig(ctx context.Context, in *Config, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := grpc.Invoke(ctx, "/daemon.Daemon/SetConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Daemon service

type DaemonServer interface {
	GetVersion(context.Context, *Empty) (*Version, error)
	InstallPackages(context.Context, *PackageList) (*Status, error)
	GetPackages(context.Context, *Empty) (*PackageList, error)
	GetConfig(context.Context, *Empty) (*Config, error)
	SetConfig(context.Context, *Config) (*Status, error)
}

func RegisterDaemonServer(s *grpc.Server, srv DaemonServer) {
	s.RegisterService(&_Daemon_serviceDesc, srv)
}

func _Daemon_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daemon.Daemon/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).GetVersion(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_InstallPackages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackageList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).InstallPackages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daemon.Daemon/InstallPackages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).InstallPackages(ctx, req.(*PackageList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_GetPackages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).GetPackages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daemon.Daemon/GetPackages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).GetPackages(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daemon.Daemon/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).GetConfig(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_SetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Config)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).SetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daemon.Daemon/SetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).SetConfig(ctx, req.(*Config))
	}
	return interceptor(ctx, in, info, handler)
}

var _Daemon_serviceDesc = grpc.ServiceDesc{
	ServiceName: "daemon.Daemon",
	HandlerType: (*DaemonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _Daemon_GetVersion_Handler,
		},
		{
			MethodName: "InstallPackages",
			Handler:    _Daemon_InstallPackages_Handler,
		},
		{
			MethodName: "GetPackages",
			Handler:    _Daemon_GetPackages_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _Daemon_GetConfig_Handler,
		},
		{
			MethodName: "SetConfig",
			Handler:    _Daemon_SetConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/tim15/wiz/api/proto/daemon.proto",
}

func init() { proto.RegisterFile("github.com/tim15/wiz/api/proto/daemon.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 410 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xb5, 0x5b, 0xd5, 0xa9, 0xc7, 0x90, 0x84, 0xad, 0x84, 0x4c, 0x2e, 0x98, 0xed, 0xc5, 0x88,
	0xb2, 0x16, 0xa9, 0x10, 0x88, 0x1b, 0x75, 0xaa, 0x08, 0x61, 0xa9, 0xc8, 0x95, 0x38, 0x70, 0xb1,
	0x36, 0xce, 0x62, 0x56, 0x89, 0xbd, 0x96, 0x77, 0x1d, 0x04, 0x67, 0x3e, 0x8d, 0x0f, 0x43, 0xf2,
	0xae, 0x1d, 0x08, 0xa0, 0xde, 0xe6, 0xcd, 0x7b, 0x6f, 0xe6, 0x79, 0xbc, 0xf0, 0xac, 0xe0, 0xea,
	0x4b, 0xbb, 0x22, 0xb9, 0x28, 0x23, 0xc5, 0xcb, 0x17, 0x2f, 0xa3, 0xaf, 0xfc, 0x7b, 0x44, 0x6b,
	0x1e, 0xd5, 0x8d, 0x50, 0x22, 0x5a, 0x53, 0x56, 0x8a, 0x8a, 0x74, 0x00, 0x39, 0x1a, 0xcd, 0x2e,
	0xee, 0x30, 0xd5, 0x34, 0xdf, 0xd0, 0x82, 0x69, 0x17, 0x3e, 0x87, 0xd1, 0x47, 0xd6, 0x48, 0x2e,
	0x2a, 0xe4, 0xc3, 0x68, 0xa7, 0x4b, 0xdf, 0x0e, 0xec, 0xd0, 0x4d, 0x7b, 0x88, 0x5f, 0x81, 0xf7,
	0x41, 0xbb, 0x12, 0x2e, 0x15, 0x0a, 0xe1, 0xd4, 0x0c, 0x91, 0xbe, 0x1d, 0x1c, 0x87, 0xde, 0xfc,
	0x1e, 0xa9, 0x37, 0x05, 0x31, 0x9a, 0x74, 0x60, 0xf1, 0x4f, 0x1b, 0x9c, 0x58, 0x54, 0x9f, 0x79,
	0x81, 0x9e, 0xc2, 0xd4, 0xb4, 0xb3, 0xad, 0xc8, 0xa9, 0xda, 0xaf, 0x99, 0x98, 0x7e, 0x62, 0xda,
	0xe8, 0x0d, 0x78, 0x4d, 0x5b, 0x65, 0x2b, 0x9a, 0x6f, 0x58, 0xb5, 0xf6, 0x8f, 0x02, 0x3b, 0x1c,
	0xcf, 0x1f, 0x11, 0xf3, 0xb5, 0x7a, 0x1e, 0x49, 0xdb, 0xea, 0x4a, 0x0b, 0x52, 0x68, 0x86, 0x1a,
	0x11, 0x38, 0x6b, 0x25, 0xcb, 0x72, 0x51, 0xd6, 0xad, 0x62, 0xd9, 0x9a, 0xed, 0x78, 0xce, 0xa4,
	0x7f, 0xdc, 0x6d, 0x7a, 0xd0, 0x4a, 0x16, 0x6b, 0x66, 0xa1, 0x09, 0x7c, 0x0e, 0xb0, 0x9f, 0x84,
	0x5c, 0x38, 0x49, 0x6e, 0xe2, 0xb7, 0xc9, 0xd4, 0x42, 0x00, 0xce, 0xe2, 0x26, 0x7e, 0x7f, 0x9d,
	0x4e, 0x6d, 0x1c, 0x80, 0x73, 0xab, 0xa8, 0x6a, 0x25, 0x7a, 0x08, 0x8e, 0xec, 0xaa, 0x2e, 0xfb,
	0x69, 0x6a, 0x10, 0x1e, 0xc1, 0xc9, 0x75, 0x59, 0xab, 0x6f, 0xf3, 0x1f, 0x47, 0xe0, 0x2c, 0xba,
	0xa0, 0x88, 0x00, 0x2c, 0x99, 0xea, 0xaf, 0x7b, 0xbf, 0xcf, 0xdf, 0xe9, 0x66, 0x93, 0x1e, 0x1a,
	0x1e, 0x5b, 0xe8, 0x35, 0x4c, 0xde, 0x55, 0x52, 0xd1, 0xed, 0xd6, 0x1c, 0x52, 0xa2, 0xb3, 0x5e,
	0xf5, 0xdb, 0xf9, 0x67, 0xe3, 0xbe, 0xa9, 0x33, 0x61, 0x0b, 0x5d, 0x82, 0xb7, 0x64, 0x6a, 0x70,
	0x1d, 0xac, 0xfa, 0xd7, 0x10, 0x6c, 0xa1, 0x0b, 0x70, 0x97, 0x4c, 0x99, 0xbf, 0x73, 0x60, 0x19,
	0xff, 0x79, 0x6c, 0x6c, 0xa1, 0xe7, 0xe0, 0xde, 0x0e, 0xea, 0x03, 0xfa, 0xef, 0x44, 0x57, 0x4f,
	0x3e, 0x3d, 0xfe, 0xef, 0x33, 0xd4, 0xda, 0x95, 0xd3, 0x3d, 0xc0, 0xcb, 0x5f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x53, 0xbf, 0x48, 0x2e, 0xe5, 0x02, 0x00, 0x00,
}
